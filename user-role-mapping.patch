diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/StoreOrderingSystemApplication.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/StoreOrderingSystemApplication.java
index b293a5fa..7a4ca459 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/StoreOrderingSystemApplication.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/StoreOrderingSystemApplication.java
@@ -69,18 +69,18 @@ public class StoreOrderingSystemApplication implements CommandLineRunner{
 	}
 	
 	private void addRoles() {
-		roleService.addRole(1L, "ADMIN", null);
-		roleService.addRole(2L, "USER", null);
-		roleService.addRole(3L, "AFFILIATE", null);
+		roleService.addRole(1L, "ADMIN");
+		roleService.addRole(2L, "USER");
+		roleService.addRole(3L, "AFFILIATE");
 	}
 	
 	private void createUsers() {
 		
-		userService.createStoreUser(1L, 
-				List.of(new Role(1, Constants.USER_ROLE_ADMIN, null),
-						new Role(2, Constants.USER_ROLE_CUSTOMER, null)), 
+		userService.createStoreUser(1, 
+				List.of(new Role(1, Constants.USER_ROLE_ADMIN),
+						new Role(2, Constants.USER_ROLE_USER)), 
 				"Joey", "Tribiani", "joey", passwordEncoder.encode("password") , "joey.tribiani@gmail.com", 971565678901L);
-		userService.createStoreUser(2L, List.of(new Role(1, Constants.USER_ROLE_ADMIN, null)), 
+		userService.createStoreUser(2, List.of(new Role(1, Constants.USER_ROLE_USER)), 
 				"Rachel", "Green", "rachel", passwordEncoder.encode("password"), "Rachel.Green@gmail.com", 971566789012L);
 		//userService.createStoreUser(3L, Constants.USER_ROLE_CUSTOMER, "Ross", "Gellar", "Ross.Gellar@gmail.com", 971567890123L);
 		//userService.createStoreUser(4L, Constants.USER_ROLE_CUSTOMER, "Monica",	"Gellar", "Monica.Gellar@gmail.com", 971568901234L);
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/controller/AuthController.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/controller/AuthController.java
index 741289a3..2eee344e 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/controller/AuthController.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/controller/AuthController.java
@@ -95,7 +95,7 @@ public class AuthController {
 
     @GetMapping("/users/{userID}")
     public ResponseEntity<?> getUserById(@Validated @PathVariable("userID")  String userIdReq){
-    	Optional<User> user = userService.findById(Long.valueOf(userIdReq));
+    	Optional<User> user = userService.findById(Integer.valueOf(userIdReq));
     	if(user != null) {
     		return ResponseHandler.generateResponse(Constants.RESPONSE_MSG_SUCCESS, HttpStatus.OK, user, 0);
     	}else {
@@ -120,7 +120,7 @@ public class AuthController {
     }
 
     private User verifyUser(String userIdReq) throws NoSuchElementException {
-    	long userId = Long.valueOf(userIdReq);
+    	int userId = Integer.valueOf(userIdReq);
     	return userService.findById(userId).orElseThrow(() -> new ResourceNotFoundException("Delete request for user (" + userId + ")"));
     }
 }
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/model/Role.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/model/Role.java
index 38b01bb2..6b34c343 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/model/Role.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/model/Role.java
@@ -1,14 +1,10 @@
 package com.storeorderingsystem.storeorderingsystem.authentication.model;
 
-import java.util.List;
-
 import jakarta.persistence.Column;
 import jakarta.persistence.Entity;
-import jakarta.persistence.FetchType;
 import jakarta.persistence.GeneratedValue;
 import jakarta.persistence.GenerationType;
 import jakarta.persistence.Id;
-import jakarta.persistence.ManyToMany;
 import jakarta.persistence.Table;
 
 @Entity
@@ -22,12 +18,9 @@ public class Role {
 	@Column(name = "ROLE_NAME")
     private String name;
 
-	/*@ManyToMany(mappedBy = "roles", fetch = FetchType.LAZY)
-    private List<User> users;*/
-
 	public Role() { }
 	
-	public Role(int roleId, String name , List<User> users) {
+	public Role(int roleId, String name) {
 		this.roleId = roleId;
 	    this.name = name;
 	}
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/model/User.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/model/User.java
index 922ade3a..09b43d89 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/model/User.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/model/User.java
@@ -23,15 +23,11 @@ public class User {
 	@Id
 	@GeneratedValue(strategy = GenerationType.AUTO)
 	@Column(name = "USER_ID")
-	private long userId;
-	
-	@Column(name = "ROLE")
-	private String role;
+	private int userId;
 	
     @ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.PERSIST)
-    @JoinTable(name = "USER_ROLES", 
-    	joinColumns = @JoinColumn(name = "user_id", referencedColumnName = "user_id"),
-        inverseJoinColumns = @JoinColumn(name = "role_id", referencedColumnName = "role_id"))
+    @JoinTable(name = "USER_ROLES", joinColumns = @JoinColumn(name = "USER_ID", referencedColumnName = "USER_ID"),
+        inverseJoinColumns = @JoinColumn(name = "ROLE_ID", referencedColumnName = "ROLE_ID"))
     private List<Role> roles = new ArrayList<>();
 	
 	@Column(name = "FIRST_NAME")
@@ -55,10 +51,9 @@ public class User {
 	@Column(name = "JOINING_DATE")
 	private String joiningDate;
 	
-	public User() {
-	}
+	public User() {}
 	
-	public User(long userId, List<Role> roles, String firstName, String lastName, String username, String password, String emailId, long phoneNumber) {
+	public User(int userId, List<Role> roles, String firstName, String lastName, String username, String password, String emailId, long phoneNumber) {
 		this.userId = userId;
 	    this.roles = roles;
 	    this.firstName = firstName;
@@ -69,20 +64,20 @@ public class User {
 	    this.phoneNumber = phoneNumber;
 	}
 
-	public long getUserId() {
+	public int getUserId() {
 		return userId;
 	}
 
-	public void setUserId(long userId) {
+	public void setUserId(int userId) {
 		this.userId = userId;
 	}
 
-	public String getRole() {
-		return role;
+	public List<Role> getRoles() {
+		return roles;
 	}
 
-	public void setRole(String role) {
-		this.role = role;
+	public void setRoles(List<Role> roles) {
+		this.roles = roles;
 	}
 
 	public String getUsername() {
@@ -141,19 +136,11 @@ public class User {
 		this.joiningDate = joiningDate;
 	}
 
-	public List<Role> getRoles() {
-		return roles;
-	}
-
-	public void setRoles(List<Role> roles) {
-		this.roles = roles;
-	}
-	
 	@Override
 	public String toString() {
 		return "StoreUser{" +
 				"userId='" + userId + '\'' +
-				", role='" + role + '\'' +
+				", roles='" + roles + '\'' +
 				", username='" + username + '\'' +
 				//", password='" + password + '\'' +
 				", firstName='" + firstName + '\'' +
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/repository/UserRepository.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/repository/UserRepository.java
index 61435615..2c62de65 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/repository/UserRepository.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/repository/UserRepository.java
@@ -6,7 +6,7 @@ import org.springframework.data.repository.CrudRepository;
 
 import com.storeorderingsystem.storeorderingsystem.authentication.model.User;
 
-public interface UserRepository extends CrudRepository<User, Long>{
+public interface UserRepository extends CrudRepository<User, Integer>{
 
 	public Optional<User> findByUsername(String username);
 }
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/RoleService.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/RoleService.java
index ff9a83ed..38539519 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/RoleService.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/RoleService.java
@@ -1,16 +1,13 @@
 package com.storeorderingsystem.storeorderingsystem.authentication.service;
 
-import java.util.List;
 import java.util.Optional;
 import org.springframework.stereotype.Service;
-
 import com.storeorderingsystem.storeorderingsystem.authentication.model.Role;
-import com.storeorderingsystem.storeorderingsystem.authentication.model.User;
 
 @Service
 public interface RoleService{
 
-	public Role addRole(long roleId, String name, List<User> users);
+	public Role addRole(long roleId, String name);
 	public Iterable<Role> lookup();
 	public Optional<Role> findById(long id);
 	public long total();
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/UserService.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/UserService.java
index 06218164..973fcc2e 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/UserService.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/UserService.java
@@ -11,9 +11,9 @@ import com.storeorderingsystem.storeorderingsystem.authentication.model.User;
 @Service
 public interface UserService{
 
-	public User createStoreUser(long id, List<Role> roles, String firstName, String lastName, String username, String password, String emailId, long phoneNumber);
+	public User createStoreUser(int id, List<Role> roles, String firstName, String lastName, String username, String password, String emailId, long phoneNumber);
 	public Iterable<User> lookup();
-	public Optional<User> findById(long id);
+	public Optional<User> findById(int id);
 	public long total();
 	public void delete(User user);
 }
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/impl/RoleServiceImpl.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/impl/RoleServiceImpl.java
index 5019456f..83081d38 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/impl/RoleServiceImpl.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/impl/RoleServiceImpl.java
@@ -1,12 +1,10 @@
 package com.storeorderingsystem.storeorderingsystem.authentication.service.impl;
 
-import java.util.List;
 import java.util.Optional;
 
 import org.springframework.stereotype.Service;
 
 import com.storeorderingsystem.storeorderingsystem.authentication.model.Role;
-import com.storeorderingsystem.storeorderingsystem.authentication.model.User;
 import com.storeorderingsystem.storeorderingsystem.authentication.repository.RoleRepository;
 import com.storeorderingsystem.storeorderingsystem.authentication.service.RoleService;
 
@@ -34,9 +32,8 @@ public class RoleServiceImpl implements RoleService{
     }
 
 	@Override
-	public Role addRole(long roleId, String name, List<User> users) {
-		return roleRepository.findById(roleId).orElse(roleRepository.save(new Role(Integer.valueOf(String.valueOf(roleId)), 
-				name, users)));
+	public Role addRole(long roleId, String name) {
+		return roleRepository.findById(roleId).orElse(roleRepository.save(new Role(Integer.valueOf(String.valueOf(roleId)), name)));
 	}
 
 	@Override
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/impl/UserServiceImpl.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/impl/UserServiceImpl.java
index 70dc4316..aef8d005 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/impl/UserServiceImpl.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/impl/UserServiceImpl.java
@@ -12,36 +12,36 @@ import com.storeorderingsystem.storeorderingsystem.authentication.service.UserSe
 
 @Service
 public class UserServiceImpl implements UserService{
-    private UserRepository storeUserRepository;
+    private UserRepository userRepository;
 
-    public UserServiceImpl(UserRepository storeUserRepository) {
-        this.storeUserRepository = storeUserRepository;
+    public UserServiceImpl(UserRepository userRepository) {
+        this.userRepository = userRepository;
     }
 
     @Override
     public Iterable<User> lookup(){
-        return storeUserRepository.findAll();
+        return userRepository.findAll();
     }
 
     @Override
-    public Optional<User> findById(long id){
-    	return storeUserRepository.findById(id);
+    public Optional<User> findById(int id){
+    	return userRepository.findById(id);
     }
     
     @Override
     public long total() {
-        return storeUserRepository.count();
+        return userRepository.count();
     }
 
 	@Override
-	public User createStoreUser(long userId, List<Role> roles, String firstName, String lastName, String username, String password, String emailId, long phoneNumber) {
-        return storeUserRepository.findById(userId).orElse(
-        		storeUserRepository.save(new User(userId, roles, firstName, lastName, username, password, emailId, phoneNumber)));
+	public User createStoreUser(int userId, List<Role> roles, String firstName, String lastName, String username, String password, String emailId, long phoneNumber) {
+        return userRepository.findById(userId).orElse(
+        		userRepository.save(new User(userId, roles, firstName, lastName, username, password, emailId, phoneNumber)));
 	}
 
 	@Override
 	public void delete(User user){
-		storeUserRepository.delete(user);
+		userRepository.delete(user);
 	}
 }
 
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/model/Bill.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/model/Bill.java
index 9651a9bb..3910408e 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/model/Bill.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/model/Bill.java
@@ -16,7 +16,7 @@ public class Bill {
 	@Column(name = "BILL_ID")
     private long billId;
 
-	@Column(name = "STORE_USER_ID")
+	@Column(name = "USER_ID")
     private long storeUserId;
 	
 	@Column(name = "ITEM_QUANTITY_ID")
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/impl/BillProcessingServiceImpl.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/impl/BillProcessingServiceImpl.java
index 80842f06..cc4e8f64 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/impl/BillProcessingServiceImpl.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/impl/BillProcessingServiceImpl.java
@@ -39,20 +39,20 @@ public class BillProcessingServiceImpl implements BillProcessingService{
         double price = 0.0;
         double billAmount = 0.0;
         double discountAmt = 0.0;
-        String userType = Constants.USER_ROLE_CUSTOMER;
+        String userType = Constants.USER_ROLE_USER;
         Date joiningDate = new Date();
         List<Products> itemRepositoryList = new ArrayList<Products>();
         User user = null;
         
         if(billInfo!= null && (billInfo.getStoreUserId() != null)) {
         	if(billInfo.getStoreUserId() != null) {	
-        		Optional<User> optionalStoreUser = storeUserRepository.findById(Long.valueOf(billInfo.getStoreUserId()));
+        		Optional<User> optionalStoreUser = storeUserRepository.findById(Integer.valueOf(billInfo.getStoreUserId()));
         		if(optionalStoreUser != null && optionalStoreUser.isPresent()) {
         			user = optionalStoreUser.get();
         		}
         		if(user!= null) {
-        			if(user.getRole() != null) {
-            			userType = user.getRole();        				
+        			if(user.getRoles().get(0).getName() != null) {
+            			userType = user.getRoles().get(0).getName();        				
         			}
         			if(user.getJoiningDate() != null) {
             			joiningDate = DateUtils.createDateFromDateString(user.getJoiningDate());        				
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/util/Constants.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/util/Constants.java
index 22904903..094bbc79 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/util/Constants.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/util/Constants.java
@@ -4,7 +4,7 @@ public class Constants {
 
 	public static final String USER_ROLE_ADMIN = "ADMIN";
 	public static final String USER_ROLE_AFFILIATE = "AFFILIATE";
-	public static final String USER_ROLE_CUSTOMER = "USER";
+	public static final String USER_ROLE_USER = "USER";
 	
 	public static final String PRODUCT_TYPE_GROCERIES = "GROCERIES";
 	public static final String PRODUCT_TYPE_UTILITIES = "UTILITIES";
diff --git a/src/main/resources/data.sql b/src/main/resources/data.sql
index 72dc9bca..646604d6 100644
--- a/src/main/resources/data.sql
+++ b/src/main/resources/data.sql
@@ -1,5 +1,3 @@
-INSERT INTO STORE_USER VALUES (10, 'ADMIN', 'Shipra', 'Ghoshray', 'shipra.ghoshray', 'password', 'Shipra.Ghoshray@gmail.com',	'971561234567');
-
-INSERT INTO ROLES VALUES (1,'ROLE_ADMIN'),(2,'ROLE_CUSTOMER');
-
-INSERT INTO USER_ROLES VALUES (10,1),(10,2);
\ No newline at end of file
+--INSERT INTO STORE_USER VALUES (10, 'ADMIN', 'Shipra', 'Ghoshray', 'shipra.ghoshray', 'password', 'Shipra.Ghoshray@gmail.com',	'971561234567');
+INSERT INTO ROLES VALUES (1,'ADMIN'),(2,'USER');
+INSERT INTO USER_ROLES VALUES (1,1),(2,2);
\ No newline at end of file
diff --git a/src/main/resources/schema.sql b/src/main/resources/schema.sql
index 09e23a7b..c29261a1 100644
--- a/src/main/resources/schema.sql
+++ b/src/main/resources/schema.sql
@@ -1,3 +1,27 @@
+CREATE TABLE ROLES(
+  ROLE_ID BIGINT PRIMARY KEY,
+  ROLE_NAME VARCHAR(30) NOT NULL
+);
+
+CREATE TABLE STORE_USER(
+  USER_ID BIGINT PRIMARY KEY,
+  FIRST_NAME VARCHAR(64),
+  LAST_NAME VARCHAR(64),
+  USERNAME VARCHAR(64),
+  PASSWORD VARCHAR(64),
+  EMAIL_ADDRESS VARCHAR(64),
+  PHONE_NUMBER VARCHAR(24),
+  JOINING_DATE TIMESTAMP
+);
+
+CREATE TABLE USER_ROLES(
+  	USER_ID BIGINT NOT NULL,
+  	ROLE_ID BIGINT NOT NULL,
+	FOREIGN KEY(USER_ID) REFERENCES STORE_USER(USER_ID),
+	FOREIGN KEY(ROLE_ID) REFERENCES ROLES(ROLE_ID),
+	PRIMARY KEY(USER_ID, ROLE_ID)
+);
+-------------------------------------------------------------
 CREATE TABLE ITEM_QUANTITY(
   ITEM_ID BIGSERIAL PRIMARY KEY,
   NAME VARCHAR(35) NOT NULL,
@@ -15,32 +39,5 @@ CREATE TABLE BILL(
   BILL_AMOUNT INTEGER
 );
 
-CREATE TABLE STORE_USER(
-  USER_ID BIGSERIAL PRIMARY KEY,
-  ROLE VARCHAR(15) NOT NULL,
-  FIRST_NAME VARCHAR(64),
-  LAST_NAME VARCHAR(64),
-  USERNAME VARCHAR(64),
-  PASSWORD VARCHAR(64),
-  EMAIL_ADDRESS VARCHAR(64),
-  PHONE_NUMBER VARCHAR(24)
-);
-
-CREATE TABLE ROLES(
-  ROLE_ID BIGSERIAL PRIMARY KEY,
-  ROLE_NAME VARCHAR(30) NOT NULL
-);
-
-CREATE TABLE USER_ROLES(
-  	USER_ID BIGSERIAL NOT NULL,
-  	ROLE_ID BIGSERIAL NOT NULL,
-	FOREIGN KEY(USER_ID) REFERENCES STORE_USER(USER_ID),
-	FOREIGN KEY(ROLE_ID) REFERENCES ROLES(ROLE_ID),
-	PRIMARY KEY(USER_ID, ROLE_ID)
-);
-
---ALTER TABLE USER_ROLES ADD PRIMARY KEY (USER_ID, ROLE_ID);
---ALTER TABLE USER_ROLES ADD FOREIGN KEY (USER_ID) REFERENCES ROLES (ROLE_ID); 
---ALTER TABLE USER_ROLES ADD FOREIGN KEY (ROLE_ID) REFERENCES STORE_USER(USER_ID);
 ALTER TABLE BILL ADD FOREIGN KEY (USER_ID) REFERENCES STORE_USER(USER_ID);
 ALTER TABLE BILL ADD FOREIGN KEY (ITEM_QUANTITY_ID) REFERENCES ITEM_QUANTITY(ITEM_ID);
