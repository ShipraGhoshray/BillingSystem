diff --git a/pom.xml b/pom.xml
index 8883e9d7..0de917e5 100644
--- a/pom.xml
+++ b/pom.xml
@@ -39,9 +39,8 @@
 			<scope>provided</scope>
 		</dependency>
 		<!--<dependency>
-			<groupId>com.mysql</groupId>
-			<artifactId>mysql-connector-j</artifactId>
-			<scope>runtime</scope>
+			<groupId>org.postgresql</groupId>
+			<artifactId>postgresql</artifactId>
 		</dependency>-->
 		<dependency>
 			<groupId>com.h2database</groupId>
@@ -66,12 +65,6 @@
 			<version>0.11.5</version>
 			<scope>runtime</scope>
 		</dependency>
-		<!--
-		<dependency>
-    		<groupId>org.springframework.boot</groupId>
-    		<artifactId>spring-boot-starter</artifactId>
-		</dependency>
-		-->
 	    <dependency>
 			<groupId>org.springframework.boot</groupId>
 			<artifactId>spring-boot-starter-security</artifactId>
@@ -83,9 +76,7 @@
 				<groupId>org.springframework.boot</groupId>
 				<artifactId>spring-boot-maven-plugin</artifactId>
 				<configuration>
-                    <jvmArguments>
-                        -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005
-                    </jvmArguments>
+                    <jvmArguments>-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005</jvmArguments>
                 </configuration>
 			</plugin>
 		</plugins>
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/StoreOrderingSystemApplication.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/StoreOrderingSystemApplication.java
index cc166a77..6652128d 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/StoreOrderingSystemApplication.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/StoreOrderingSystemApplication.java
@@ -1,26 +1,33 @@
 
 package com.storeorderingsystem.storeorderingsystem;
+import java.util.ArrayList;
 
 import org.springframework.boot.CommandLineRunner;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.security.crypto.password.PasswordEncoder;
 
-import com.storeorderingsystem.storeorderingsystem.service.impl.ItemInventoryServiceImpl;
-import com.storeorderingsystem.storeorderingsystem.service.impl.UserServiceImpl;
+import com.storeorderingsystem.storeorderingsystem.authentication.service.impl.RoleServiceImpl;
+import com.storeorderingsystem.storeorderingsystem.authentication.service.impl.UserServiceImpl;
+import com.storeorderingsystem.storeorderingsystem.products.service.impl.ProductsServiceImpl;
 import com.storeorderingsystem.storeorderingsystem.util.Constants;
 
+import com.storeorderingsystem.storeorderingsystem.authentication.model.Role;
+
 @SpringBootApplication
 public class StoreOrderingSystemApplication implements CommandLineRunner{
 
 	private final UserServiceImpl userService;
-    private final ItemInventoryServiceImpl itemInventoryService;
+    private final ProductsServiceImpl productsService;
+    private final RoleServiceImpl roleService;
     private final PasswordEncoder passwordEncoder;
     
-    public StoreOrderingSystemApplication(PasswordEncoder passwordEncoder, ItemInventoryServiceImpl itemInventoryService, UserServiceImpl userService) {
-    	this.passwordEncoder = passwordEncoder;
-    	this.itemInventoryService = itemInventoryService;
+    public StoreOrderingSystemApplication(ProductsServiceImpl productsService, UserServiceImpl userService,
+    		RoleServiceImpl roleService, PasswordEncoder passwordEncoder) {
+    	this.productsService = productsService;
     	this.userService = userService;
+    	this.roleService = roleService;
+    	this.passwordEncoder = passwordEncoder;
     }
     
 	public static void main(String[] args) {
@@ -52,30 +59,50 @@ public class StoreOrderingSystemApplication implements CommandLineRunner{
 	@Override
 	public void run(String... args) throws Exception {
 		createInventory();
+		addRoles();
 		createUsers();
-		long inventoryCount = itemInventoryService.total();
+			
+		long inventoryCount = productsService.total();
 		System.out.println("Total inventory in the system is : "+ inventoryCount);
 		
 		long userCount = userService.total();
 		System.out.println("Total users in the system is : "+ userCount);
 	}
 	
-	private void createUsers() {
-		userService.createStoreUser(1L, Constants.USER_ROLE_ADMIN, "Joey", "Tribiani", "joey", passwordEncoder.encode("password") , "joey.tribiani@gmail.com", 971565678901L);
-		userService.createStoreUser(2L, Constants.USER_ROLE_AFFILIATE, "Rachel", "Green", "rachel", passwordEncoder.encode("password"), "Rachel.Green@gmail.com", 971566789012L);
-		//userService.createStoreUser(3L, Constants.USER_ROLE_CUSTOMER, "Ross", "Gellar", "Ross.Gellar@gmail.com", 971567890123L);
+	private void addRoles() {
+		roleService.addRole(1L, "ADMIN", null);
+		roleService.addRole(2L, "USER", null);
+		roleService.addRole(3L, "AFFILIATE", null);
+	}
+	private void createUsers() {       
+        
+		userService.createStoreUser(1L, 
+				new ArrayList<Role>() {{
+					add(new Role(1, "ADMIN", null));
+					add(new Role(2, "USER", null));
+				}}, 
+				"Joey", "Tribiani", "joey", passwordEncoder.encode("password") , "joey.tribiani@gmail.com", 971565678901L);
+		userService.createStoreUser(2L, 
+				new ArrayList<Role>() {{
+					add(new Role(2, "USER", null));
+				}}, 
+				"Rachel", "Green", "rachel", passwordEncoder.encode("password"), "Rachel.Green@gmail.com", 971566789012L);
+		userService.createStoreUser(3L, new ArrayList<Role>() {{
+			add(new Role(2, "USER", null));
+			}}, 
+			"Ross", "Gellar", "ross", passwordEncoder.encode("password"), "Ross.Gellar@gmail.com", 971567890123L);
 		//userService.createStoreUser(4L, Constants.USER_ROLE_CUSTOMER, "Monica",	"Gellar", "Monica.Gellar@gmail.com", 971568901234L);
 		//userService.createStoreUser(5L, Constants.USER_ROLE_CUSTOMER, "Chandler", "Bing", "Chandler.Bing@gmail.com", 971560123456L);
 	}
 
 	private void createInventory(){
-		itemInventoryService.createItemInventory(1L, "Bread", 10, 5, Constants.ITEM_TYPE_GROCERIES);
-		itemInventoryService.createItemInventory(2L, "Eggs", 10, 2, Constants.ITEM_TYPE_GROCERIES);
-		itemInventoryService.createItemInventory(3L, "Milk", 10, 1, Constants.ITEM_TYPE_GROCERIES);
-		itemInventoryService.createItemInventory(4L, "Chicken", 1, 5, Constants.ITEM_TYPE_GROCERIES);
-		itemInventoryService.createItemInventory(5L, "Garbage Bags", 3, 5, Constants.ITEM_TYPE_UTILITIES);
-		itemInventoryService.createItemInventory(6L, "Shampoo", 10, 1, Constants.ITEM_TYPE_UTILITIES);
-		itemInventoryService.createItemInventory(7L, "Stapler", 10, 1, Constants.ITEM_TYPE_STATIONARY);
+		productsService.createItemInventory(1, "Bread", 5, Constants.ITEM_TYPE_GROCERIES);
+		productsService.createItemInventory(2, "Eggs", 2, Constants.ITEM_TYPE_GROCERIES);
+		productsService.createItemInventory(3, "Milk", 1, Constants.ITEM_TYPE_GROCERIES);
+		productsService.createItemInventory(4, "Chicken", 5, Constants.ITEM_TYPE_GROCERIES);
+		productsService.createItemInventory(5, "Garbage Bags", 5, Constants.ITEM_TYPE_UTILITIES);
+		productsService.createItemInventory(6, "Shampoo", 1, Constants.ITEM_TYPE_UTILITIES);
+		productsService.createItemInventory(7, "Stapler", 1, Constants.ITEM_TYPE_STATIONARY);
 	}
 }
 	
\ No newline at end of file
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/config/AppConfig.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/config/AppConfig.java
index a0313239..7a02397e 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/config/AppConfig.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/config/AppConfig.java
@@ -1,4 +1,4 @@
-package com.storeorderingsystem.storeorderingsystem.config;
+package com.storeorderingsystem.storeorderingsystem.authentication.config;
 
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -6,17 +6,11 @@ import org.springframework.security.authentication.AuthenticationManager;
 import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
 import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
 import org.springframework.security.crypto.password.PasswordEncoder;
-import com.storeorderingsystem.storeorderingsystem.service.impl.UserServiceImpl;
-
 
 @Configuration
 public class AppConfig {
 
-	private UserServiceImpl userService;
-	
-	public AppConfig(UserServiceImpl userService) {
-		this.userService = userService;
-	}
+	public AppConfig() {}
 	
 	@Bean
 	public PasswordEncoder getPasswordEncoder() {
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/config/CustomUserDetailsService.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/config/CustomUserDetailsService.java
index 9e2720ea..e01d016b 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/config/CustomUserDetailsService.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/config/CustomUserDetailsService.java
@@ -1,46 +1,33 @@
-package com.storeorderingsystem.storeorderingsystem.config;
+package com.storeorderingsystem.storeorderingsystem.authentication.config;
 
-import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 import java.util.stream.Collectors;
 
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.context.annotation.Bean;
 import org.springframework.security.core.GrantedAuthority;
 import org.springframework.security.core.authority.SimpleGrantedAuthority;
 import org.springframework.security.core.userdetails.User;
 import org.springframework.security.core.userdetails.UserDetails;
 import org.springframework.security.core.userdetails.UserDetailsService;
 import org.springframework.security.core.userdetails.UsernameNotFoundException;
-import org.springframework.security.crypto.password.PasswordEncoder;
-import org.springframework.security.provisioning.InMemoryUserDetailsManager;
 import org.springframework.stereotype.Service;
 
-import com.storeorderingsystem.storeorderingsystem.model.Role;
-import com.storeorderingsystem.storeorderingsystem.repository.UserRepository;
+import com.storeorderingsystem.storeorderingsystem.authentication.model.Role;
+import com.storeorderingsystem.storeorderingsystem.authentication.repository.UserRepository;
 
 @Service
-public class CustomUserDetailsService /* implements UserDetailsService */ {
+public class CustomUserDetailsService  implements UserDetailsService  {
 
     private final UserRepository userRepository;
-    private final PasswordEncoder passwordEncoder;
     
     @Autowired
-    public CustomUserDetailsService(PasswordEncoder passwordEncoder, UserRepository userRepository) {
-    	this.passwordEncoder = passwordEncoder;
+    public CustomUserDetailsService(UserRepository userRepository) {
         this.userRepository = userRepository;
     }
     
-	@Bean
+    /*@Bean -- to create static users
 	public UserDetailsService users() {
-    //@Override
-    //public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException{
-    	
-        ArrayList<GrantedAuthority> roles = new ArrayList<GrantedAuthority>(); 
-        roles.add(new SimpleGrantedAuthority("ADMIN")); 
-        roles.add(new SimpleGrantedAuthority("USER")); 
-        
     	UserDetails inMemoryAdmin = User.builder()
 				.username("joey")
 				.password(passwordEncoder.encode("password"))
@@ -51,14 +38,18 @@ public class CustomUserDetailsService /* implements UserDetailsService */ {
 				.password(passwordEncoder.encode("password"))
 				.roles("USER")
 				.build();
-    	//com.storeorderingsystem.storeorderingsystem.model.User user = userRepository.findByUsername(username).orElseThrow(() -> new UsernameNotFoundException("Username not found"));		
     	return new InMemoryUserDetailsManager(inMemoryAdmin, inMemoryUser);
-//    	return new User(user.getUsername(), user.getPassword(), mapRolesToAuthorities(user.getRoles()));
+    }*/
+    
+	@Override
+    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException{
+    	
+     	com.storeorderingsystem.storeorderingsystem.authentication.model.User user = 
+     		userRepository.findByUsername(username).orElseThrow(() -> new UsernameNotFoundException("Username not found"));	
+    	return new User(user.getUsername(), user.getPassword(), mapRolesToAuthorities(user.getRoles()));
     }
 
     private Collection<GrantedAuthority> mapRolesToAuthorities(List<Role> roles) {
-    	
-    	Collection<GrantedAuthority> coll = roles.stream().map(role -> new SimpleGrantedAuthority(role.getName())).collect(Collectors.toList());
         return roles.stream().map(role -> new SimpleGrantedAuthority(role.getName())).collect(Collectors.toList());
     }
 }
\ No newline at end of file
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/config/SecurityConfiguration.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/config/SecurityConfiguration.java
index 1bc517c0..a08e67fd 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/config/SecurityConfiguration.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/config/SecurityConfiguration.java
@@ -1,4 +1,4 @@
-package com.storeorderingsystem.storeorderingsystem.config;
+package com.storeorderingsystem.storeorderingsystem.authentication.config;
 
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -10,8 +10,8 @@ import org.springframework.security.config.http.SessionCreationPolicy;
 import org.springframework.security.web.SecurityFilterChain;
 import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
 
-import com.storeorderingsystem.storeorderingsystem.authentication.JWTAuthenticationFilter;
-import com.storeorderingsystem.storeorderingsystem.authentication.JwtAuthenticationEntryPoint;
+import com.storeorderingsystem.storeorderingsystem.authentication.jwt.JWTAuthenticationFilter;
+import com.storeorderingsystem.storeorderingsystem.authentication.jwt.JwtAuthenticationEntryPoint;
 
 
 @Configuration
@@ -32,8 +32,10 @@ public class SecurityConfiguration {
 		http.csrf(csrf -> csrf.disable())
 			.cors(cors -> cors.disable())
 			.authorizeHttpRequests(authorize -> { authorize
-				.requestMatchers(HttpMethod.POST, "/api/createProduct").hasRole("ADMIN")
-         		.requestMatchers(HttpMethod.GET, "/api/*").permitAll()
+				.requestMatchers(HttpMethod.POST, "/api/products").hasRole("ADMIN")
+				.requestMatchers(HttpMethod.DELETE, "/auth/users/**").hasRole("ADMIN")
+		 		.requestMatchers(HttpMethod.GET, "/auth/users").permitAll()
+         		.requestMatchers(HttpMethod.GET, "/auth/users/**").permitAll()
          		.requestMatchers("/auth/login").permitAll()
          		.requestMatchers("/auth/*").permitAll()
 				.anyRequest().authenticated();
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/controller/AuthController.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/controller/AuthController.java
index 05113575..96f7ed87 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/controller/AuthController.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/controller/AuthController.java
@@ -1,7 +1,12 @@
-package com.storeorderingsystem.storeorderingsystem.controller;
+package com.storeorderingsystem.storeorderingsystem.authentication.controller;
 
 import java.security.Principal;
+import java.util.List;
+import java.util.NoSuchElementException;
+import java.util.Optional;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.security.authentication.AuthenticationManager;
@@ -9,40 +14,53 @@ import org.springframework.security.authentication.BadCredentialsException;
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.core.userdetails.UserDetails;
 import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.validation.annotation.Validated;
+import org.springframework.web.bind.annotation.DeleteMapping;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-import com.storeorderingsystem.storeorderingsystem.authentication.JWTGenerator;
-import com.storeorderingsystem.storeorderingsystem.model.JwtRequest;
-import com.storeorderingsystem.storeorderingsystem.model.JwtResponse;
+import com.storeorderingsystem.storeorderingsystem.authentication.dto.JwtLoginRequest;
+import com.storeorderingsystem.storeorderingsystem.authentication.dto.JwtLoginResponse;
+import com.storeorderingsystem.storeorderingsystem.authentication.dto.ResponseHandler;
+import com.storeorderingsystem.storeorderingsystem.authentication.jwt.JWTGenerator;
+import com.storeorderingsystem.storeorderingsystem.authentication.model.User;
+import com.storeorderingsystem.storeorderingsystem.authentication.service.UserService;
+import com.storeorderingsystem.storeorderingsystem.exceptions.ResourceNotFoundException;
+import com.storeorderingsystem.storeorderingsystem.util.Constants;
 
 @RestController
 @RequestMapping("/auth")
 public class AuthController {
 
+	Logger log = LoggerFactory.getLogger(AuthController.class);
+	
+	private final UserService userService;
 	final private UserDetailsService userDetailService;
 	final private AuthenticationManager authManager;
 	final private JWTGenerator jwtTokenGenerator;
 	
-	public AuthController(UserDetailsService userDetailService, AuthenticationManager authManager, JWTGenerator jwtTokenGenerator) {
+	public AuthController(UserService userService, UserDetailsService userDetailService, AuthenticationManager authManager, JWTGenerator jwtTokenGenerator) {
+		this.userService = userService;
 		this.userDetailService = userDetailService;
 		this.authManager = authManager;
 		this.jwtTokenGenerator = jwtTokenGenerator;
 	}
 	
+	/* LOGIN */
 	@PostMapping("/login")
-    public ResponseEntity<JwtResponse> login(@RequestBody JwtRequest request) {
+    public ResponseEntity<JwtLoginResponse> login(@RequestBody JwtLoginRequest request) {
 
         this.doAuthenticate(request.getUsername(), request.getPassword());
         UserDetails userDetails = userDetailService.loadUserByUsername(request.getUsername());
         String token = this.jwtTokenGenerator.generateToken(userDetails);
         
         //JwtResponse response = JwtResponse.builder().jwtToken(token).username(userDetails.getUsername()).build();
-        JwtResponse response = new JwtResponse();
+        JwtLoginResponse response = new JwtLoginResponse();
         response.setJwtToken(token);
         response.setUsername(userDetails.getUsername());
         return new ResponseEntity<>(response, HttpStatus.OK);
@@ -56,14 +74,52 @@ public class AuthController {
 			throw new BadCredentialsException(" Invalid Username or Password  !!");
 		}
 	}
+	
+	@ExceptionHandler(BadCredentialsException.class)
+	public String exceptionHandler() {
+		return "Credentials Invalid !!!";
+	}
 
-    @ExceptionHandler(BadCredentialsException.class)
-    public String exceptionHandler() {
-        return "Credentials Invalid !!";
+	/* USERS */
+	@GetMapping("/users")
+	public ResponseEntity getUsers(){
+		List<User> userList = (List<User>) this.userService.lookup();
+		log.info("User List size:" + userList.size());
+		if(userList != null && userList.size() > 0) {
+			return ResponseHandler.generateResponse(Constants.RESPONSE_MSG_SUCCESS, HttpStatus.OK, userList, userList.size());
+		}else {
+			return ResponseHandler.generateResponse(Constants.RESPONSE_MSG_NO_DATA_FOUND, HttpStatus.OK, null, 0);
+		}
     }
-    
+	
+	@GetMapping("/users/{userID}")
+    public ResponseEntity getUserById(@Validated @PathVariable("userID")  String userIdReq){
+		Optional<User> user = userService.findById(Long.valueOf(userIdReq));
+		if(user != null) {
+			return ResponseHandler.generateResponse(Constants.RESPONSE_MSG_SUCCESS, HttpStatus.OK, user, 0);
+			//return new ResponseEntity<Optional<User>>(user, HttpStatus.OK);
+		}else {
+			return new ResponseEntity<String>(Constants.RESPONSE_MSG_NO_DATA_FOUND, HttpStatus.OK);
+		}
+    }
+	
     @GetMapping("/current-user")
 	public ResponseEntity<String> getLoggedInUser(Principal principal){
         return new ResponseEntity<String>(principal.getName(), HttpStatus.OK);
     }
+    
+    @DeleteMapping("users/{userId}")
+    public void delete(@PathVariable(value = "userId") String userId) {
+    	try {
+    		User user = verifyUser(userId);
+        	userService.delete(user);
+    	}catch(NoSuchElementException e) {
+    		throw new ResourceNotFoundException("User does not exist!");
+    	}
+    }
+    
+    private User verifyUser(String userIdReq) throws NoSuchElementException {
+    	long userId = Long.valueOf(userIdReq);
+		return userService.findById(userId).orElseThrow(() -> new ResourceNotFoundException("Delete request for user ("+ userId + ")"));
+	}
 }
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/dto/JwtLoginRequest.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/dto/JwtLoginRequest.java
index 290665c1..0ec39234 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/dto/JwtLoginRequest.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/dto/JwtLoginRequest.java
@@ -1,4 +1,4 @@
-package com.storeorderingsystem.storeorderingsystem.model;
+package com.storeorderingsystem.storeorderingsystem.authentication.dto;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
@@ -13,7 +13,7 @@ import lombok.ToString;
 @NoArgsConstructor
 @Builder
 @ToString
-public class JwtRequest {
+public class JwtLoginRequest {
 
 	private String username;
 	private String password;
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/dto/JwtLoginResponse.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/dto/JwtLoginResponse.java
index 5d334305..a6630a82 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/dto/JwtLoginResponse.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/dto/JwtLoginResponse.java
@@ -1,4 +1,4 @@
-package com.storeorderingsystem.storeorderingsystem.model;
+package com.storeorderingsystem.storeorderingsystem.authentication.dto;
 
 import lombok.AllArgsConstructor;
 import lombok.Builder;
@@ -13,7 +13,7 @@ import lombok.ToString;
 @NoArgsConstructor
 @Builder
 @ToString
-public class JwtResponse {
+public class JwtLoginResponse {
 	
 	private String jwtToken;
 	private String username;
@@ -32,6 +32,6 @@ public class JwtResponse {
 	}
 	public static Object builder() {
 		// TODO Auto-generated method stub
-		return new JwtResponse();
+		return new JwtLoginResponse();
 	}
 }
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/dto/User.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/dto/User.java
index b5245271..02254348 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/dto/User.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/dto/User.java
@@ -1,6 +1,6 @@
-package com.storeorderingsystem.storeorderingsystem.model;
+package com.storeorderingsystem.storeorderingsystem.authentication.dto;
 
-public class StoreUser {
+public class User {
 	
 	private long id;
 	private String userType;
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/jwt/JWTAuthenticationFilter.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/jwt/JWTAuthenticationFilter.java
index e78314c7..d2d5ead1 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/jwt/JWTAuthenticationFilter.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/jwt/JWTAuthenticationFilter.java
@@ -1,4 +1,4 @@
-package com.storeorderingsystem.storeorderingsystem.authentication;
+package com.storeorderingsystem.storeorderingsystem.authentication.jwt;
 
 import java.io.IOException;
 
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/jwt/JWTGenerator.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/jwt/JWTGenerator.java
index 56e15957..e782f6e8 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/jwt/JWTGenerator.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/jwt/JWTGenerator.java
@@ -1,4 +1,4 @@
-package com.storeorderingsystem.storeorderingsystem.authentication;
+package com.storeorderingsystem.storeorderingsystem.authentication.jwt;
 
 import java.security.Key;
 import java.util.Date;
@@ -7,7 +7,9 @@ import java.util.Map;
 import java.util.function.Function;
 import org.springframework.security.core.userdetails.UserDetails;
 import org.springframework.stereotype.Component;
-import com.storeorderingsystem.storeorderingsystem.util.SecurityConstants;
+
+import com.storeorderingsystem.storeorderingsystem.authentication.util.SecurityConstants;
+
 import io.jsonwebtoken.Claims;
 import io.jsonwebtoken.Jwts;
 import io.jsonwebtoken.io.Decoders;
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/jwt/JwtAuthenticationEntryPoint.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/jwt/JwtAuthenticationEntryPoint.java
index 54437642..8d53bc0e 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/jwt/JwtAuthenticationEntryPoint.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/jwt/JwtAuthenticationEntryPoint.java
@@ -1,4 +1,4 @@
-package com.storeorderingsystem.storeorderingsystem.authentication;
+package com.storeorderingsystem.storeorderingsystem.authentication.jwt;
 
 import java.io.IOException;
 import org.springframework.security.core.AuthenticationException;
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/model/Role.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/model/Role.java
index e42446c4..9d51a119 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/model/Role.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/model/Role.java
@@ -1,14 +1,12 @@
-package com.storeorderingsystem.storeorderingsystem.model;
+package com.storeorderingsystem.storeorderingsystem.authentication.model;
 
 import java.util.List;
 
 import jakarta.persistence.Column;
 import jakarta.persistence.Entity;
-import jakarta.persistence.FetchType;
 import jakarta.persistence.GeneratedValue;
 import jakarta.persistence.GenerationType;
 import jakarta.persistence.Id;
-import jakarta.persistence.ManyToMany;
 import jakarta.persistence.Table;
 
 @Entity
@@ -17,19 +15,23 @@ public class Role {
     @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
 	@Column(name = "ROLE_ID")
-    private int role_id;
+    private long roleId;
     
-	@Column(name = "NAME")
+	@Column(name = "ROLE_NAME")
     private String name;
 
-	@ManyToMany(mappedBy = "roles", fetch = FetchType.LAZY)
-    private List<User> users;
-
-	public int getRoleId() {
-		return role_id;
+	public Role() { }
+	
+	public Role(long roleId, String name , List<User> users) {
+		this.roleId = roleId;
+	    this.name = name;
+	}
+	
+	public long getRoleId() {
+		return roleId;
 	}
-	public void setRoleId(int role_id) {
-		this.role_id = role_id;
+	public void setRoleId(long roleId) {
+		this.roleId = roleId;
 	}
 	public String getName() {
 		return name;
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/model/User.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/model/User.java
index 7efb8195..ce45c8f1 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/model/User.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/model/User.java
@@ -1,4 +1,4 @@
-package com.storeorderingsystem.storeorderingsystem.model;
+package com.storeorderingsystem.storeorderingsystem.authentication.model;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -25,14 +25,10 @@ public class User {
 	@Column(name = "USER_ID")
 	private long userId;
 	
-	@Column(name = "ROLE")
-	private String role;
-	
-    @ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
-    @JoinTable(name = "user_with_role", 
+    @ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.PERSIST)
+    @JoinTable(name = "USER_ROLES", 
     	joinColumns = @JoinColumn(name = "user_id", referencedColumnName = "user_id"),
         inverseJoinColumns = @JoinColumn(name = "role_id", referencedColumnName = "role_id"))
-    //@Column(name = "ROLES")
     private List<Role> roles = new ArrayList<>();
 	
 	@Column(name = "FIRST_NAME")
@@ -53,15 +49,15 @@ public class User {
 	@Column(name = "PHONE_NUMBER")
 	private long phoneNumber;
 
-	@Column(name = "JOINING_DATE")
+	//@Column(name = "JOINING_DATE")
 	private String joiningDate;
 	
 	public User() {
 	}
 	
-	public User(long userId, String role, String firstName, String lastName, String username, String password, String emailId, long phoneNumber) {
+	public User(long userId, List<Role> roles, String firstName, String lastName, String username, String password, String emailId, long phoneNumber) {
 		this.userId = userId;
-	    this.role = role;
+	    this.roles = roles;
 	    this.firstName = firstName;
 	    this.lastName = lastName;
 	    this.username = username;
@@ -78,14 +74,6 @@ public class User {
 		this.userId = userId;
 	}
 
-	public String getRole() {
-		return role;
-	}
-
-	public void setRole(String role) {
-		this.role = role;
-	}
-
 	public String getUsername() {
 		return username;
 	}
@@ -154,7 +142,6 @@ public class User {
 	public String toString() {
 		return "StoreUser{" +
 				"userId='" + userId + '\'' +
-				", role='" + role + '\'' +
 				", username='" + username + '\'' +
 				//", password='" + password + '\'' +
 				", firstName='" + firstName + '\'' +
@@ -172,15 +159,15 @@ public class User {
 			return false;
 		User that = (User) o;
 		return Objects.equals(userId, that.userId) && 
-				Objects.equals(role, that.role)&&
 				Objects.equals(firstName, that.firstName)&&
 				Objects.equals(lastName, that.lastName)&&
+				Objects.equals(username, that.username)&&
 				Objects.equals(emailId, that.emailId)&&
 				Objects.equals(phoneNumber, that.phoneNumber);
 	}
 
 	@Override
 	public int hashCode() {
-		return Objects.hash(userId, role, firstName, lastName, emailId, phoneNumber);
+		return Objects.hash(userId, firstName, lastName, username, emailId, phoneNumber);
 	}
 }
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/repository/UserRepository.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/repository/UserRepository.java
index c1e239f4..61435615 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/repository/UserRepository.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/repository/UserRepository.java
@@ -1,10 +1,10 @@
-package com.storeorderingsystem.storeorderingsystem.repository;
+package com.storeorderingsystem.storeorderingsystem.authentication.repository;
 
 import java.util.Optional;
 
 import org.springframework.data.repository.CrudRepository;
 
-import com.storeorderingsystem.storeorderingsystem.model.User;
+import com.storeorderingsystem.storeorderingsystem.authentication.model.User;
 
 public interface UserRepository extends CrudRepository<User, Long>{
 
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/UserService.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/UserService.java
index cca4d34d..06218164 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/UserService.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/UserService.java
@@ -1,15 +1,17 @@
-package com.storeorderingsystem.storeorderingsystem.service;
+package com.storeorderingsystem.storeorderingsystem.authentication.service;
 
+import java.util.List;
 import java.util.Optional;
 
 import org.springframework.stereotype.Service;
 
-import com.storeorderingsystem.storeorderingsystem.model.User;
+import com.storeorderingsystem.storeorderingsystem.authentication.model.Role;
+import com.storeorderingsystem.storeorderingsystem.authentication.model.User;
 
 @Service
 public interface UserService{
 
-	public User createStoreUser(long id, String userType, String firstName, String lastName, String username, String password, String emailId, long phoneNumber);
+	public User createStoreUser(long id, List<Role> roles, String firstName, String lastName, String username, String password, String emailId, long phoneNumber);
 	public Iterable<User> lookup();
 	public Optional<User> findById(long id);
 	public long total();
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/impl/UserServiceImpl.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/impl/UserServiceImpl.java
index 6ff23fa9..9865e535 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/impl/UserServiceImpl.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/service/impl/UserServiceImpl.java
@@ -1,12 +1,14 @@
-package com.storeorderingsystem.storeorderingsystem.service.impl;
+package com.storeorderingsystem.storeorderingsystem.authentication.service.impl;
 
+import java.util.List;
 import java.util.Optional;
 
 import org.springframework.stereotype.Service;
 
-import com.storeorderingsystem.storeorderingsystem.model.User;
-import com.storeorderingsystem.storeorderingsystem.repository.UserRepository;
-import com.storeorderingsystem.storeorderingsystem.service.UserService;
+import com.storeorderingsystem.storeorderingsystem.authentication.model.Role;
+import com.storeorderingsystem.storeorderingsystem.authentication.model.User;
+import com.storeorderingsystem.storeorderingsystem.authentication.repository.UserRepository;
+import com.storeorderingsystem.storeorderingsystem.authentication.service.UserService;
 
 @Service
 public class UserServiceImpl implements UserService{
@@ -32,9 +34,9 @@ public class UserServiceImpl implements UserService{
     }
 
 	@Override
-	public User createStoreUser(long userId, String role, String firstName, String lastName, String username, String password, String emailId, long phoneNumber) {
-        return storeUserRepository.findById(userId).orElse(
-        		storeUserRepository.save(new User(userId, role, firstName, lastName, firstName, password, emailId, phoneNumber)));
+	public User createStoreUser(long userId, List<Role> roles, String firstName, String lastName, String username, String password, String emailId, long phoneNumber) {
+		return storeUserRepository.findById(userId).orElse(
+        		storeUserRepository.save(new User(userId, roles, firstName, lastName, username, password, emailId, phoneNumber)));
 	}
 
 	@Override
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/util/SecurityConstants.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/util/SecurityConstants.java
index b48da082..356c308b 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/util/SecurityConstants.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/authentication/util/SecurityConstants.java
@@ -1,4 +1,4 @@
-package com.storeorderingsystem.storeorderingsystem.util;
+package com.storeorderingsystem.storeorderingsystem.authentication.util;
 
 public class SecurityConstants {
     public static final long JWT_EXPIRATION = 70000;
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/controller/ProductController.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/controller/ProductController.java
index c4c86a35..cf6f6a38 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/controller/ProductController.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/controller/ProductController.java
@@ -1,10 +1,7 @@
-package com.storeorderingsystem.storeorderingsystem.controller;
+package com.storeorderingsystem.storeorderingsystem.products.controller;
 
-import java.net.URISyntaxException;
 import java.util.Collection;
-import java.util.List;
 import java.util.NoSuchElementException;
-import java.util.Optional;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -12,7 +9,6 @@ import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.validation.annotation.Validated;
 import org.springframework.web.bind.annotation.CrossOrigin;
-import org.springframework.web.bind.annotation.DeleteMapping;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PatchMapping;
 import org.springframework.web.bind.annotation.PathVariable;
@@ -22,61 +18,37 @@ import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-import com.storeorderingsystem.storeorderingsystem.model.Bill;
-import com.storeorderingsystem.storeorderingsystem.model.BillAmount;
-import com.storeorderingsystem.storeorderingsystem.model.User;
-import com.storeorderingsystem.storeorderingsystem.repository.ItemQuantity;
-import com.storeorderingsystem.storeorderingsystem.service.BillProcessingService;
-import com.storeorderingsystem.storeorderingsystem.service.ItemInventoryService;
-import com.storeorderingsystem.storeorderingsystem.service.UserService;
+import com.storeorderingsystem.storeorderingsystem.products.dto.Bill;
+import com.storeorderingsystem.storeorderingsystem.products.dto.BillAmount;
+import com.storeorderingsystem.storeorderingsystem.products.model.Products;
+import com.storeorderingsystem.storeorderingsystem.products.service.BillProcessingService;
+import com.storeorderingsystem.storeorderingsystem.products.service.ProductsService;
 import com.storeorderingsystem.storeorderingsystem.util.Constants;
 
 @RestController
 @RequestMapping("/api")
 @CrossOrigin(origins = "http://localhost:3000")
-public class OrderController {
+public class ProductController {
 	
-	Logger log = LoggerFactory.getLogger(OrderController.class);
-	
-	private final UserService userService;
+	Logger log = LoggerFactory.getLogger(ProductController.class);
+
 	private final BillProcessingService billProcessingService;
-	private final ItemInventoryService itemInventoryService;
+	private final ProductsService productsService;
 	
-	public OrderController(UserService userService, BillProcessingService billProcessingService, ItemInventoryService itemInventoryService) {
-		this.userService = userService;
+	public ProductController(BillProcessingService billProcessingService, ProductsService productsService) {
 		this.billProcessingService = billProcessingService;
-		this.itemInventoryService = itemInventoryService;
+		this.productsService = productsService;
 	}
 	
-	@GetMapping("/inventory")
-    public Collection<ItemQuantity> getItemInventoryReact(){
-        return (Collection<ItemQuantity>) this.itemInventoryService.lookup();
-    }
-	
-	@GetMapping("/users")
-	public ResponseEntity getUsers(){
-		List<User> userList = (List<User>) this.userService.lookup();
-		log.info("User List size:" + userList.size());
-		if(userList != null && userList.size() > 0) {
-			return new ResponseEntity<Iterable<User>>(userList, HttpStatus.OK);
-		}else {
-			return new ResponseEntity<String>(Constants.RESPONSE_MSG_NO_DATA_FOUND, HttpStatus.OK);
-		}
+	/* PRODUCTS */
+	@GetMapping("/products")
+    public Collection<Products> getItemInventoryReact(){
+        return (Collection<Products>) this.productsService.lookup();
     }
 	
-	@GetMapping("/users/{userID}")
-    public ResponseEntity getUserById(@Validated String userIdReq){
-		Optional<User> user = userService.findById(Long.valueOf(userIdReq));
-		if(user != null) {
-			return new ResponseEntity<Optional<User>>(user, HttpStatus.OK);
-		}else {
-			return new ResponseEntity<String>(Constants.RESPONSE_MSG_NO_DATA_FOUND, HttpStatus.OK);
-		}
-    }
-
-	@PostMapping("/createProduct")
-    public ResponseEntity<String> createNewProduct(@RequestBody ItemQuantity item){
-        ItemQuantity product = this.itemInventoryService.createItemInventory(item.getItemId(), item.getName(), item.getPrice(), item.getQuantity(), item .getType());
+	@PostMapping("/products")
+    public ResponseEntity<String> createNewProduct(@Validated @RequestBody Products item){
+        Products product = this.productsService.createItemInventory(item.getItemId(), item.getName(), item.getPrice(), item .getType());
         if(product != null) {
             return new ResponseEntity<String>(Constants.RESPONSE_PRODUCT_CREATED, HttpStatus.OK);
         }else {
@@ -84,52 +56,37 @@ public class OrderController {
         }
     }
 	
-	@PostMapping("/createNewItemAPI")
-	ResponseEntity<ItemQuantity> createNewItemAPI(@Validated @RequestBody ItemQuantity item) throws URISyntaxException {
-		ItemQuantity result = itemInventoryService.save(item);
+	/*@PostMapping("/products")
+	ResponseEntity<Products> createNewItemAPI(@Validated @RequestBody Products item) throws URISyntaxException {
+		Products result = productsService.save(item);
 		return ResponseEntity.ok().body(result);
-	}
+	}*/
 	
-	@PostMapping("/generateBillAmount")
+	@PostMapping("/bill")
     public BillAmount generateBillAmount(@RequestBody Bill bill){
         return this.billProcessingService.processBill(bill);
     }
 	
-	@PutMapping("/items/{itemId}/details")
-	public ItemQuantity updateWithPut(@PathVariable(value = "itemId") String itemId, @RequestBody @Validated ItemQuantity itemRequest) {
-		ItemQuantity item = verifyItem(itemId, itemRequest.getName());
+	@PutMapping("/products/{itemId}/details")
+	public Products updateWithPut(@PathVariable(value = "itemId") String itemId, @RequestBody @Validated Products itemRequest) {
+		Products item = verifyItem(itemId, itemRequest.getName());
 		item.setPrice(itemRequest.getPrice());
-		return itemInventoryService.save(item);
+		return productsService.save(item);
 	}
 
-	private ItemQuantity verifyItem(String itemIdReq, String name) throws NoSuchElementException {
-		long itemId = Long.valueOf(itemIdReq);
-		return itemInventoryService.findById(itemId, name).orElseThrow(() -> new NoSuchElementException("Item for request("+ itemId + " for name" + name));
+	private Products verifyItem(String itemIdReq, String name) throws NoSuchElementException {
+		int itemId = Integer.valueOf(itemIdReq);
+		return productsService.findById(itemId, name).orElseThrow(() -> new NoSuchElementException("Item for request("+ itemId + " for name" + name));
 	}
 
-    @PatchMapping("/items/{itemId}/details")
-    public ItemQuantity updateWithPatch(@PathVariable(value = "itemId") String itemId, @RequestBody @Validated ItemQuantity itemRequest) {
+    @PatchMapping("/products/{itemId}/details")
+    public Products updateWithPatch(@PathVariable(value = "itemId") String itemId, @RequestBody @Validated Products itemRequest) {
     	try {
-        	ItemQuantity item = verifyItem(itemId, itemRequest.getName());
+        	Products item = verifyItem(itemId, itemRequest.getName());
         	item.setPrice(itemRequest.getPrice());
-        	return itemInventoryService.save(item);
+        	return productsService.save(item);
     	}catch(NoSuchElementException e) {
     		return null;
     	}
     }
-
-    @DeleteMapping(path = "deleteUser/{userId}")
-    public void delete(@PathVariable(value = "userId") String userId) {
-    	try {
-    		User user = verifyUser(userId);
-        	userService.delete(user);
-    	}catch(NoSuchElementException e) {
-    		System.out.println("User does not exist");
-    	}
-    }
-    
-    private User verifyUser(String userIdReq) throws NoSuchElementException {
-    	long userId = Long.valueOf(userIdReq);
-		return userService.findById(userId).orElseThrow(() -> new NoSuchElementException("User for request("+ userId));
-	}
 }
\ No newline at end of file
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/dto/Bill.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/dto/Bill.java
index b2dbebca..1614e38d 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/dto/Bill.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/dto/Bill.java
@@ -1,4 +1,4 @@
-package com.storeorderingsystem.storeorderingsystem.model;
+package com.storeorderingsystem.storeorderingsystem.products.dto;
 
 import java.util.List;
 
@@ -9,7 +9,7 @@ public class Bill {
     
     private String billId;
     private String storeUserId;
-    private List<ItemQuantity> items;
+    private List<Product> items;
     private long createdDate;
     private float totalPrice;
     
@@ -45,11 +45,11 @@ public class Bill {
 		this.totalPrice = totalPrice;
 	}
 
-	public List<ItemQuantity> getItems() {
+	public List<Product> getItems() {
 		return items;
 	}
 
-	public void setItems(List<ItemQuantity> items) {
+	public void setItems(List<Product> items) {
 		this.items = items;
 	}
 }
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/dto/BillAmount.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/dto/BillAmount.java
index 94f3b896..51ce810a 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/dto/BillAmount.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/dto/BillAmount.java
@@ -1,4 +1,4 @@
-package com.storeorderingsystem.storeorderingsystem.model;
+package com.storeorderingsystem.storeorderingsystem.products.dto;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/dto/Product.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/dto/Product.java
index a532e8de..40aeb8b2 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/dto/Product.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/dto/Product.java
@@ -1,6 +1,6 @@
-package com.storeorderingsystem.storeorderingsystem.model;
+package com.storeorderingsystem.storeorderingsystem.products.dto;
 
-public class ItemQuantity {
+public class Product {
 
     private String name;
     private int price;
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/model/Bill.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/model/Bill.java
index 8b5dc42b..76791c35 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/model/Bill.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/model/Bill.java
@@ -1,4 +1,4 @@
-package com.storeorderingsystem.storeorderingsystem.repository;
+package com.storeorderingsystem.storeorderingsystem.products.model;
 
 import jakarta.persistence.Column;
 import jakarta.persistence.Entity;
@@ -16,10 +16,10 @@ public class Bill {
 	@Column(name = "BILL_ID")
     private long billId;
 
-	@Column(name = "STORE_USER_ID")
+	@Column(name = "USER_ID")
     private long storeUserId;
 	
-	@Column(name = "ITEM_QUANTITY_ID")
+	//@Column(name = "_ID")
     private long itemsQuantityId;
 	
 	@Column(name = "CREATED_DATE")
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/model/Products.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/model/Products.java
index 698e6922..608e62de 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/model/Products.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/model/Products.java
@@ -1,7 +1,8 @@
-package com.storeorderingsystem.storeorderingsystem.repository;
+package com.storeorderingsystem.storeorderingsystem.products.model;
 
 import java.util.Objects;
 
+import jakarta.annotation.Nonnull;
 import jakarta.persistence.Column;
 import jakarta.persistence.Entity;
 import jakarta.persistence.GeneratedValue;
@@ -10,38 +11,38 @@ import jakarta.persistence.Id;
 import jakarta.persistence.Table;
 
 @Entity
-@Table(name="ITEM_QUANTITY")
-public class ItemQuantity {
+@Table(name="PRODUCTS")
+public class Products {
 
 	@Id
 	@GeneratedValue(strategy = GenerationType.AUTO)
-	@Column(name = "ITEM_ID")
-    private long itemId;
+	@Column(name = "PRODUCT_ID")
+    private int productId;
 
+	@Nonnull
 	@Column(name = "NAME")
     private String name;
 	
+	@Nonnull
 	@Column(name = "PRICE")
     private int price;
 	
-	@Column(name = "QUANTITY")
     private int quantity;
 	
+	@Nonnull
 	@Column(name = "TYPE")
     private String type;
 	
-	public ItemQuantity() {
+	public Products() {
 	}
 
-	public ItemQuantity(long itemId, String name, int price, int quantity, String type) {
-		this.itemId = itemId;
+	public Products(int itemId, String name, int price, String type) {
+		this.productId = itemId;
 	    this.name = name;
 	    this.price = price;
-	    this.quantity = quantity;
 	    this.type = type;
 	}
 	    
-	    
 	public String getType() {
 		return type;
 	}
@@ -50,12 +51,12 @@ public class ItemQuantity {
 		this.type = type;
 	}
 
-	public long getItemId() {
-		return itemId;
+	public int getItemId() {
+		return productId;
 	}
 
-	public void setItemId(long itemId) {
-		this.itemId = itemId;
+	public void setItemId(int itemId) {
+		this.productId = itemId;
 	}
 	
 	public String getName() {
@@ -85,10 +86,10 @@ public class ItemQuantity {
 	@Override
 	public String toString() {
 		return "ItemQuantity{" +
-				"itemId='" + itemId + '\'' +
+				"itemId='" + productId + '\'' +
 				", name='" + name + '\'' +
 				", price='" + price + '\'' +
-				", quantity='" + quantity + '\'' +
+				//", quantity='" + quantity + '\'' +
 				", type='" + type + '\'' +
 				'}';
 	}
@@ -99,16 +100,16 @@ public class ItemQuantity {
 			return true;
 		if (o == null || getClass() != o.getClass()) 
 			return false;
-		ItemQuantity that = (ItemQuantity) o;
-		return Objects.equals(itemId, that.itemId) &&
+		Products that = (Products) o;
+		return Objects.equals(productId, that.productId) &&
 				Objects.equals(name, that.name)&&
 				Objects.equals(price, that.price)&&
-				Objects.equals(quantity, that.quantity)&&
+				//Objects.equals(quantity, that.quantity)&&
 				Objects.equals(type, that.type);
 	}
 
 	@Override
 	public int hashCode() {
-		return Objects.hash(itemId, name, price, quantity, type);
+		return Objects.hash(productId, name, price, type);
 	}
 }
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/repository/BillRepository.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/repository/BillRepository.java
index e7ccad92..5970b4ab 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/repository/BillRepository.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/repository/BillRepository.java
@@ -1,7 +1,9 @@
-package com.storeorderingsystem.storeorderingsystem.repository;
+package com.storeorderingsystem.storeorderingsystem.products.repository;
 
 import org.springframework.data.repository.CrudRepository;
 
+import com.storeorderingsystem.storeorderingsystem.products.model.Bill;
+
 
 public interface BillRepository extends CrudRepository<Bill, Long>{
 }
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/repository/ProductsRepository.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/repository/ProductsRepository.java
index 7d91684d..51b92005 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/repository/ProductsRepository.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/repository/ProductsRepository.java
@@ -1,7 +1,9 @@
-package com.storeorderingsystem.storeorderingsystem.repository;
+package com.storeorderingsystem.storeorderingsystem.products.repository;
 
 import org.springframework.data.repository.CrudRepository;
 
+import com.storeorderingsystem.storeorderingsystem.products.model.Products;
+
 //@RepositoryRest	
-public interface ItemQuantityRepository extends CrudRepository<ItemQuantity, Long>{
+public interface ProductsRepository extends CrudRepository<Products, Integer>{
 }
\ No newline at end of file
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/BillProcessingService.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/BillProcessingService.java
index e5f6e5d7..798acb97 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/BillProcessingService.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/BillProcessingService.java
@@ -1,14 +1,14 @@
-package com.storeorderingsystem.storeorderingsystem.service;
+package com.storeorderingsystem.storeorderingsystem.products.service;
 
 import org.springframework.stereotype.Service;
 
-import com.storeorderingsystem.storeorderingsystem.model.Bill;
-import com.storeorderingsystem.storeorderingsystem.model.BillAmount;
+import com.storeorderingsystem.storeorderingsystem.products.dto.Bill;
+import com.storeorderingsystem.storeorderingsystem.products.dto.BillAmount;
 
 @Service
 public interface BillProcessingService{
 	
 	public BillAmount processBill(Bill billInfo);	
-	public Iterable<com.storeorderingsystem.storeorderingsystem.repository.Bill> lookup();
+	public Iterable<com.storeorderingsystem.storeorderingsystem.products.model.Bill> lookup();
 	public long total();  
 }
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/ProductsService.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/ProductsService.java
index 341e6ca1..7738b864 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/ProductsService.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/ProductsService.java
@@ -1,15 +1,16 @@
-package com.storeorderingsystem.storeorderingsystem.service;
+package com.storeorderingsystem.storeorderingsystem.products.service;
 
 import java.util.Optional;
 import org.springframework.stereotype.Service;
-import com.storeorderingsystem.storeorderingsystem.repository.ItemQuantity;
+
+import com.storeorderingsystem.storeorderingsystem.products.model.Products;
 
 @Service
-public interface ItemInventoryService{
+public interface ProductsService{
 
-	public ItemQuantity createItemInventory(long itemId, String name, int price, int quantity, String type);
-	public Iterable<ItemQuantity> lookup();
+	public Products createItemInventory(int itemId, String name, int price, String type);
+	public Iterable<Products> lookup();
 	public long total();  
-	public ItemQuantity save(ItemQuantity item);  
-    public Optional<ItemQuantity> findById(long id, String name);
+	public Products save(Products item);  
+    public Optional<Products> findById(int id, String name);
 }
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/impl/BillProcessingServiceImpl.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/impl/BillProcessingServiceImpl.java
index 0b5c88df..352774d7 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/impl/BillProcessingServiceImpl.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/impl/BillProcessingServiceImpl.java
@@ -1,4 +1,4 @@
-package com.storeorderingsystem.storeorderingsystem.service.impl;
+package com.storeorderingsystem.storeorderingsystem.products.service.impl;
 
 import java.util.ArrayList;
 import java.util.Date;
@@ -7,13 +7,13 @@ import java.util.Optional;
 
 import org.springframework.stereotype.Service;
 
-import com.storeorderingsystem.storeorderingsystem.model.BillAmount;
-import com.storeorderingsystem.storeorderingsystem.model.User;
-import com.storeorderingsystem.storeorderingsystem.repository.Bill;
-import com.storeorderingsystem.storeorderingsystem.repository.BillRepository;
-import com.storeorderingsystem.storeorderingsystem.repository.ItemQuantity;
-import com.storeorderingsystem.storeorderingsystem.repository.UserRepository;
-import com.storeorderingsystem.storeorderingsystem.service.BillProcessingService;
+import com.storeorderingsystem.storeorderingsystem.authentication.model.User;
+import com.storeorderingsystem.storeorderingsystem.authentication.repository.UserRepository;
+import com.storeorderingsystem.storeorderingsystem.products.dto.BillAmount;
+import com.storeorderingsystem.storeorderingsystem.products.model.Bill;
+import com.storeorderingsystem.storeorderingsystem.products.model.Products;
+import com.storeorderingsystem.storeorderingsystem.products.repository.BillRepository;
+import com.storeorderingsystem.storeorderingsystem.products.service.BillProcessingService;
 import com.storeorderingsystem.storeorderingsystem.util.Constants;
 import com.storeorderingsystem.storeorderingsystem.util.DateUtils;
 
@@ -33,7 +33,7 @@ public class BillProcessingServiceImpl implements BillProcessingService{
 	}
 
 	@Override
-	public BillAmount processBill(com.storeorderingsystem.storeorderingsystem.model.Bill billInfo) {
+	public BillAmount processBill(com.storeorderingsystem.storeorderingsystem.products.dto.Bill billInfo) {
 		
         System.out.println("Process Bill");
         double price = 0.0;
@@ -41,7 +41,7 @@ public class BillProcessingServiceImpl implements BillProcessingService{
         double discountAmt = 0.0;
         String userType = Constants.USER_ROLE_CUSTOMER;
         Date joiningDate = new Date();
-        List<ItemQuantity> itemRepositoryList = new ArrayList<ItemQuantity>();
+        List<Products> itemRepositoryList = new ArrayList<Products>();
         User user = null;
         
         if(billInfo!= null && (billInfo.getStoreUserId() != null)) {
@@ -51,8 +51,8 @@ public class BillProcessingServiceImpl implements BillProcessingService{
         			user = optionalStoreUser.get();
         		}
         		if(user!= null) {
-        			if(user.getRole() != null) {
-            			userType = user.getRole();        				
+        			if(user.getRoles() != null) {
+            			userType = user.getRoles().get(0).getName();        				
         			}
         			if(user.getJoiningDate() != null) {
             			joiningDate = DateUtils.createDateFromDateString(user.getJoiningDate());        				
@@ -60,7 +60,7 @@ public class BillProcessingServiceImpl implements BillProcessingService{
         		}
         		
         		if(billInfo.getItems()!= null && billInfo.getItems().size() > 0) {
-            		for(com.storeorderingsystem.storeorderingsystem.model.ItemQuantity item:billInfo.getItems()) {
+            		for(com.storeorderingsystem.storeorderingsystem.products.dto.Product item:billInfo.getItems()) {
 
             			itemRepositoryList.add(populateItemQuantity(item));
             			price = item.getPrice() * item.getQuantity();
@@ -82,16 +82,16 @@ public class BillProcessingServiceImpl implements BillProcessingService{
         return null;
    }
 	
-	private BillAmount getBillAmount(com.storeorderingsystem.storeorderingsystem.model.Bill billInfo, double billAmount) {
+	private BillAmount getBillAmount(com.storeorderingsystem.storeorderingsystem.products.dto.Bill billInfo, double billAmount) {
 		BillAmount billAmountObj = new BillAmount();
 		billAmountObj.setBillId(billInfo.getBillId());
 		billAmountObj.setBillAmount(billAmount);
 		return billAmountObj;
 	}
 	
-	private ItemQuantity populateItemQuantity(com.storeorderingsystem.storeorderingsystem.model.ItemQuantity item) {
+	private Products populateItemQuantity(com.storeorderingsystem.storeorderingsystem.products.dto.Product item) {
 		
-		ItemQuantity itemRepoObj = new ItemQuantity();
+		Products itemRepoObj = new Products();
 		itemRepoObj.setName(item.getName());
 		itemRepoObj.setPrice(item.getPrice());
 		itemRepoObj.setQuantity(item.getQuantity());
@@ -99,11 +99,11 @@ public class BillProcessingServiceImpl implements BillProcessingService{
 		return itemRepoObj;
 	}
 	
-	private Bill saveBillAndItemRepository(com.storeorderingsystem.storeorderingsystem.model.Bill billInfo, double billAmount, 
-			double discountAmount, List<com.storeorderingsystem.storeorderingsystem.repository.ItemQuantity> itemRepositoryList) {
+	private Bill saveBillAndItemRepository(com.storeorderingsystem.storeorderingsystem.products.dto.Bill billInfo, double billAmount, 
+			double discountAmount, List<com.storeorderingsystem.storeorderingsystem.products.model.Products> itemRepositoryList) {
 		Bill billRepoObj = null;
     	if(itemRepositoryList.size() > 0) {
-    		for(ItemQuantity item: itemRepositoryList) {       	
+    		for(Products item: itemRepositoryList) {       	
     			billRepoObj = new Bill();
     			//billRepoObj.setBillId(billInfo.getBillId());
     			billRepoObj.setStoreUserId(Long.valueOf(billInfo.getStoreUserId()));
@@ -154,7 +154,7 @@ public class BillProcessingServiceImpl implements BillProcessingService{
     }	
 	
     @Override
-    public Iterable<com.storeorderingsystem.storeorderingsystem.repository.Bill> lookup(){
+    public Iterable<com.storeorderingsystem.storeorderingsystem.products.model.Bill> lookup(){
         return billRepository.findAll();
     }
 
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/impl/ProductsServiceImpl.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/impl/ProductsServiceImpl.java
index fcb7ab32..dffdec66 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/impl/ProductsServiceImpl.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/products/service/impl/ProductsServiceImpl.java
@@ -1,45 +1,45 @@
-package com.storeorderingsystem.storeorderingsystem.service.impl;
+package com.storeorderingsystem.storeorderingsystem.products.service.impl;
 
 import java.util.Optional;
 
 import org.springframework.stereotype.Service;
 
-import com.storeorderingsystem.storeorderingsystem.repository.ItemQuantity;
-import com.storeorderingsystem.storeorderingsystem.repository.ItemQuantityRepository;
-import com.storeorderingsystem.storeorderingsystem.service.ItemInventoryService;
+import com.storeorderingsystem.storeorderingsystem.products.model.Products;
+import com.storeorderingsystem.storeorderingsystem.products.repository.ProductsRepository;
+import com.storeorderingsystem.storeorderingsystem.products.service.ProductsService;
 
 @Service
-public class ItemInventoryServiceImpl implements ItemInventoryService{
-    private ItemQuantityRepository itemQuantityRepository;
+public class ProductsServiceImpl implements ProductsService{
+    private ProductsRepository productsRepository;
 
-    public ItemInventoryServiceImpl(ItemQuantityRepository itemQuantityRepository) {
-        this.itemQuantityRepository = itemQuantityRepository;
+    public ProductsServiceImpl(ProductsRepository productsRepository) {
+        this.productsRepository = productsRepository;
     }
 
     @Override
-    public ItemQuantity createItemInventory(long itemId, String name, int price, int quantity, String type) {
-        return itemQuantityRepository.findById(itemId).orElse(
-        		itemQuantityRepository.save(new ItemQuantity(itemId, name, price, quantity, type)));   
+    public Products createItemInventory(int itemId, String name, int price, String type) {
+        return productsRepository.findById(itemId).orElse(
+        		productsRepository.save(new Products(itemId, name, price, type)));   
     }
 
     @Override
-    public Iterable<ItemQuantity> lookup(){
-        return itemQuantityRepository.findAll();
+    public Iterable<Products> lookup(){
+        return productsRepository.findAll();
     }
 
     @Override
     public long total() {
-        return itemQuantityRepository.count();
+        return productsRepository.count();
     }
     
     @Override
-	public ItemQuantity save(ItemQuantity item) {
-    	return itemQuantityRepository.save(item);
+	public Products save(Products item) {
+    	return productsRepository.save(item);
     }
     
     @Override
-    public Optional<ItemQuantity> findById(long id, String name){
-    	return itemQuantityRepository.findById(id);
+    public Optional<Products> findById(int id, String name){
+    	return productsRepository.findById(id);
     }
 }
 
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/util/AppStartupEvent.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/util/AppStartupEvent.java
deleted file mode 100644
index e24503c0..00000000
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/util/AppStartupEvent.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.storeorderingsystem.storeorderingsystem.util;
-
-import org.springframework.boot.context.event.ApplicationReadyEvent;
-import org.springframework.context.ApplicationListener;
-
-import com.storeorderingsystem.storeorderingsystem.model.User;
-import com.storeorderingsystem.storeorderingsystem.repository.UserRepository;
-
-public class AppStartupEvent implements ApplicationListener<ApplicationReadyEvent>{
-
-	//@Autowired
-	//private BillProcessingService billProcessor;
-	
-	private final UserRepository storeUserRepository;
-	
-	public AppStartupEvent(UserRepository storeUserRepository) {
-		this.storeUserRepository = storeUserRepository;
-	} 
-	
-	@Override
-	public void onApplicationEvent(ApplicationReadyEvent event) {
-		// TODO Auto-generated method stub
-		Iterable<User> storeUsers = this.storeUserRepository.findAll();
-		storeUsers.forEach(System.out::println);
-		
-	}
-
-}
diff --git a/src/main/java/com/storeorderingsystem/storeorderingsystem/util/Constants.java b/src/main/java/com/storeorderingsystem/storeorderingsystem/util/Constants.java
index 724b3dd3..fff11036 100644
--- a/src/main/java/com/storeorderingsystem/storeorderingsystem/util/Constants.java
+++ b/src/main/java/com/storeorderingsystem/storeorderingsystem/util/Constants.java
@@ -15,6 +15,7 @@ public class Constants {
 	public static final int USER_TYPE_2YEAR_DISCOUNT_PERCENT = 5;
 	
 	public static final String EMPTY_STRING = "";
+	public static final String RESPONSE_MSG_SUCCESS = "Success!";
 	public static final String RESPONSE_MSG_NO_DATA_FOUND = "NO Data Found";
 	public static final String RESPONSE_PRODUCT_CREATED = "Product Created";
 	public static final String RESPONSE_PRODUCT_CREATED_FAILED = "Unable to create Product";
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
index 52c8392e..ee854b14 100644
--- a/src/main/resources/application.properties
+++ b/src/main/resources/application.properties
@@ -1,5 +1,20 @@
 logging.level.org.springframework.jdbc.datasource.init.ScriptUtils=debug
-#spring.data.rest.base-path=/api
-spring.jpa.hibernate.ddl.auto=none
-#spring.security.user.name=shipra
-#speing.security.user.password=password
\ No newline at end of file
+spring.h2.console.enabled=true
+# Hibernate ddl auto (create, create-drop, validate, update)
+spring.jpa.hibernate.ddl-auto = none
+
+#postgresql
+#spring.datasource.url = jdbc:postgresql://localhost:5432/onlinestoredb
+#spring.datasource.username = postgres
+#spring.datasource.password = password
+#spring.datasource.testOnBorrow  = true
+#spring.datasource.validationQuery = SELECT 1
+#spring.datasource.schema= onlinestore
+
+#spring.jpa.properties.hibernate.default_schema  = onlinestore
+#spring.flyway.schemas =  db_schema_name
+
+#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQL93Dialect
+#spring.jpa.show-sql = true
+#spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false
+#spring.main.banner-mode = off
\ No newline at end of file
diff --git a/src/main/resources/data.sql b/src/main/resources/data.sql
index 72dc9bca..c2ae8b8c 100644
--- a/src/main/resources/data.sql
+++ b/src/main/resources/data.sql
@@ -1,5 +1,9 @@
-INSERT INTO STORE_USER VALUES (10, 'ADMIN', 'Shipra', 'Ghoshray', 'shipra.ghoshray', 'password', 'Shipra.Ghoshray@gmail.com',	'971561234567');
+INSERT INTO roles (role_id, role_name) VALUES (1, 'ADMIN');
+INSERT INTO roles (role_id, role_name) VALUES (2, 'USER');
+INSERT INTO roles (role_id, role_name) VALUES (3, 'AFFILIATE');
 
-INSERT INTO ROLES VALUES (1,'ROLE_ADMIN'),(2,'ROLE_CUSTOMER');
+INSERT INTO store_user(USER_ID, first_name, last_name, username, password, email_address, phone_number) VALUES(1, 'Joey', 'Tribiani', 'joey', 'password', 'joey.tribiani@gmail.com', 971565678901);
+INSERT INTO store_user(USER_ID, first_name, last_name, username, password, email_address, phone_number) VALUES(2, 'Rachel', 'Green', 'rachel', 'password', 'rachel.green@gmail.com', 971565670901);
+INSERT INTO store_user(USER_ID, first_name, last_name, username, password, email_address, phone_number) VALUES(3, 'Shipra', 'Ghoshray', 'shipra', 'password', 'Shipra.Ghoshray@gmail.com', '971561234567');
 
-INSERT INTO USER_ROLES VALUES (10,1),(10,2);
\ No newline at end of file
+--INSERT INTO USER_ROLES VALUES (1,1),(2,2);
\ No newline at end of file
diff --git a/src/main/resources/schema.sql b/src/main/resources/schema.sql
index f176bab3..d9238040 100644
--- a/src/main/resources/schema.sql
+++ b/src/main/resources/schema.sql
@@ -1,23 +1,11 @@
-CREATE TABLE ITEM_QUANTITY(
-  ITEM_ID BIGSERIAL PRIMARY KEY,
-  NAME VARCHAR(35) NOT NULL,
-  PRICE INTEGER NOT NULL,
-  QUANTITY INTEGER,
-  TYPE VARCHAR(15)
-);
-CREATE TABLE BILL(
-  BILL_ID BIGSERIAL PRIMARY KEY,
-  USER_ID INTEGER NOT NULL,
-  ITEM_QUANTITY_ID INTEGER  NOT NULL,
-  CREATED_DATE VARCHAR(64),
-  TOTAL_PRICE INTEGER,
-  DISCOUNT_AMOUNT INTEGER,
-  BILL_AMOUNT INTEGER
-);
+--CREATE SCHEMA IF NOT EXISTS ONLINESTORE;
 
+CREATE TABLE ROLES(
+  ROLE_ID BIGINT PRIMARY KEY,
+  ROLE_NAME VARCHAR(30) NOT NULL
+);
 CREATE TABLE STORE_USER(
-  USER_ID BIGSERIAL PRIMARY KEY,
-  ROLE VARCHAR(15) NOT NULL,
+  USER_ID BIGINT PRIMARY KEY,
   FIRST_NAME VARCHAR(64),
   LAST_NAME VARCHAR(64),
   USERNAME VARCHAR(64),
@@ -25,22 +13,36 @@ CREATE TABLE STORE_USER(
   EMAIL_ADDRESS VARCHAR(64),
   PHONE_NUMBER VARCHAR(24)
 );
-
-CREATE TABLE ROLES(
-  ROLE_ID BIGSERIAL PRIMARY KEY,
-  NAME VARCHAR(30) NOT NULL
-);
-
 CREATE TABLE USER_ROLES(
-  	USER_ID BIGSERIAL NOT NULL,
-  	ROLE_ID BIGSERIAL NOT NULL,
+  	USER_ID BIGINT NOT NULL,
+  	ROLE_ID BIGINT NOT NULL,
 	FOREIGN KEY(USER_ID) REFERENCES STORE_USER(USER_ID),
 	FOREIGN KEY(ROLE_ID) REFERENCES ROLES(ROLE_ID),
 	PRIMARY KEY(USER_ID, ROLE_ID)
 );
 
---ALTER TABLE USER_ROLES ADD PRIMARY KEY (USER_ID, ROLE_ID);
---ALTER TABLE USER_ROLES ADD FOREIGN KEY (USER_ID) REFERENCES ROLES (ROLE_ID); 
---ALTER TABLE USER_ROLES ADD FOREIGN KEY (ROLE_ID) REFERENCES STORE_USER(USER_ID);
-ALTER TABLE BILL ADD FOREIGN KEY (USER_ID) REFERENCES STORE_USER(USER_ID);
-ALTER TABLE BILL ADD FOREIGN KEY (ITEM_QUANTITY_ID) REFERENCES ITEM_QUANTITY(ITEM_ID);
+CREATE TABLE PRODUCTS(
+  PRODUCT_ID BIGINT PRIMARY KEY,
+  NAME VARCHAR(35) NOT NULL,
+  --DESCRIPTION VARCHAR(50) NOT NULL,
+  PRICE INTEGER NOT NULL,
+  TYPE VARCHAR(15)
+);
+
+CREATE TABLE BILL(
+  BILL_ID BIGINT PRIMARY KEY,
+  USER_ID BIGINT NOT NULL,
+  CREATED_DATE TIMESTAMP,
+  TOTAL_PRICE INTEGER,
+  DISCOUNT_AMOUNT INTEGER,
+  BILL_AMOUNT INTEGER,
+  FOREIGN KEY(USER_ID) REFERENCES STORE_USER(USER_ID)
+);
+
+CREATE TABLE BILL_PRODUCTS(
+  	BILL_ID BIGINT NOT NULL,
+  	PRODUCT_ID BIGINT NOT NULL,
+	FOREIGN KEY(BILL_ID) REFERENCES BILL(BILL_ID),
+	FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID),
+	PRIMARY KEY(BILL_ID, PRODUCT_ID)
+);
\ No newline at end of file
